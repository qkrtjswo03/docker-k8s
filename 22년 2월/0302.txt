[03/02] docker

이미지 만들기  - docker-hub  에 계정 만들기 
생성된 이미지를 로컬 이미지 저장소 -> 원격저장소(docker-hub)


도커, 쿠버네티스 -> 도커 스웜 vs. 쿠버네티스 환경에서 서비스 제공을 위한 최소단위?
도커 동작원리, 쿠버네티스 아키텍처 

가상화 : 서버 가상화 (하이퍼바이저)
하이퍼바이저는 물리 자원에 접근하여 추상화 작업(물리자원->논리자원)을 거치고 이를 통해 vResources 를 생성한다. 이를 조합하고 연결하여 완전한 하나의 서버로 서비스를 제공하는 것은 '가상화' 라 한다. 

성능 저하가 필수요소 -> 무중단 서비스, 지역간 이동, 유연한 리소스 제공

클라우드 환경에서 필수요소
클라우드 '빌려쓰기' -> 무엇을 빌려쓰는가? 에 따라 클라우드의 종류가 달라진다.
- IaaS (Infra Structure as a Service) : 서버, 라우터, 방화벽, 스위치... (EC2
- PaaS (Platform as a Service) : 개발 환경 (도커), google app engine
- SaaS (Software as a Service) : salesforce.com 


서버 가상화의 가장 큰 단점은 성능저하



도커 컨테이너 라이프 사이클(생성,수정,삭제)

user1@docker01:~$ docker container run -it --name test01 \
> --hostname centos01 centos:7 /bin/bash
[root@centos01 /]#

 해당 컨테이너를 빠져 나오고 싶다면(연결을 해제하고 싶다면?)
 1. Ctrl+D (exit)  -> 컨테이너 종료후 빠져나온다
 2. then press the Ctrl + P, ctrl + Q  -> 컨테이너가 백 그라운드에서 계속 실행된다. 

user1@docker01:~$ docker container ls | grep centos:7
566abdba6d1e   centos:7       "/bin/bash"              2 minutes ago   Up 2 minutes                                                 test01
user1@docker01:~$

생성되있고 백그라운드에서 동작하는 컨테이너에 접속하여 명령을 실행하고자 한다면
1. attach -> 해당 컨테이너에 직접 연결하여 명령실행 
2. exec -> 외부에서 컨테이너에 명령을 전달하고 결과를 외부에서 확인하는 방법

user1@docker01:~$ docker container exec 566abdba6d1e cat /etc/hostname
centos01
user1@docker01:~$

실제 OS 입장에서 컨테이너는 하나의 애플리케이션이므로 각 애플리케이션(컨테이너)이 실행되면
애플리케이션 별로 1개의 PID(Process ID) 가 할당된다.  

이미지의 경우 동일한 centos:7 이라고 하더라도 나중에 업데이트가 된 centos:7 과 기존 centos:7 은 차이가 있을 수 있다. 

도커 네트워크의 기본 드라이버
user1@docker01:~$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
ee0788d3e212   bridge    bridge    local
0872bd6748ea   host      host      local
710b08da2c20   none      null      local

 bridge 는 실제 ubuntu 의 주소와 동일한 대역의 주소를 컨테이너에 할당한다. 
 host 는 일반 가상화에서는 지원되지 않는 옵션으로 호스트(ubuntu)의 IP 주소를 컨테이너에 할당하고 동일하게 사용하고자 하는 경우에 사용(거의 사용하지 않는다)
 none : 컨테이너에 NIC 이 없는 상태
 overlay 는 클러스터 환경에서 사용되는 드라이버이고 클러스터링 되어 있는 호스트끼리 동일 사설 네트워크를 사용할 수 있다.  


        "NetworkSettings": {
            "Networks": {
                "bridge": {
                    "IPAddress": "172.17.0.3",

user1@docker01:~$ docker container inspect --format='{{.NetworkSettings.Networks.bridge.IPAddress}}' 566abdba6d1e
172.17.0.3
user1@docker01:~$



 컨테이너를 이용하여 웹서버를 실행시키는 방법
 1. 애플리케이션 컨테이너를 활용하는 방법
 2. OS 컨테이너 내에 웹서버를 설치하고 이를 통해 서비스 하는 방법

 OS 컨테이너를 이용하여 웹서비스를 제공하고자 한다면 기본 홈 디렉토리는 
 /var/www/html 이 된다. 

 하지만 애플리케이션 컨테이너를 활용하고자 할 경우에는 기본 홈디렉토리가 /var/www/html 이 아니라 아래와 같다.
 nginx -> /usr/share/nginx/html
 httpd -> /usr/local/apache2/htdocs


 http://211.183.3.200:8002 로 접속했을 때 ubuntu 의 httphtml 아래에 있는 index.html 파일의 내용이 보이도록 해 보세요!!!!

docker container run -d -p 8002:80 -v /home/user1/httpdhtml:/usr/local/apache2/htdocs httpd

컨테이너에게 볼륨, 디렉토리를 제공하는 옵션  : -v 
-v 는 마운트 ,  volume 을 블럭형태로 제공하는 두가지 방법
1. 마운트
-v /home/user1/test:/usr/share/nginx/html
우분투의 /home/user1/test 디렉토리와 컨테이너의 /usr/share/nginx/html 을 마운트

2. 블럭스토리지(volume 을 생성하고 해당 볼륨을 컨테이너의 /dev/sda3,..과 같은 형태로 제공)




* docker container prune , docker volume prune, 
docker system prune(중지중인 컨테이너, 사용하지 않는 이미지/네트워크/볼륨 등 삭제)


user1@docker01:~$ docker volume create --name testvolume1  <-- 볼륨 생성
testvolume1
user1@docker01:~$ docker container run -it -v testvolume1:/root centos:7 /bin/bash

<- centos:7 이미지를 이용하여 컨테이너 생성시 볼륨 testvolume1 을 컨테이너의 /root 로 사용한다. 

[root@c93d492a8869 /]# touch /root/volumetest.txt  <-- /root 에 파일 생성
[root@c93d492a8869 /]# exit  <-- 컨테이너 종료하고 빠져나오기
user1@docker01:~$ docker container rm c93d492a8869  <-- 컨테이너 삭제
c93d492a8869
user1@docker01:~$
user1@docker01:~$ docker volume ls
DRIVER    VOLUME NAME
local     testvolume1   <-- 컨테이너가 삭제되더라도 볼륨은 남아 있다. 
user1@docker01:~$

user1@docker01:~$ docker container run -it -v testvolume1:/root centos:7 /bin/bash
[root@57bb298e2e36 /]# ls /root
anaconda-ks.cfg  volumetest.txt  <-- 새로운 컨테이너에 기존 testvolume1 을 연결하면 기존 데이터를 확인할 수 있다. 
[root@57bb298e2e36 /]#



컨테이너 생성시 시스템 환경변수 선언도 가능하다 -e
시스템 환경변수는 사용자가 로그인하게 되면 시스템 내에서 사용할 수 있는 다양한 기본 설정 정보를 담은 변수를 의미하며, PATH, USER, HOSTNAME , SSH 등과 같은 정보를 담는다.
시스템 환경변수는 시스템 내의 어느 곳에서나 동일하게 적용된다. 


-w : working directory 를 의미하며 처음 컨테이너로 접속하면 해당 디렉토리로 이동한다. 지정되지 않았을 경우에는 기본적으로 / 로 이동한다. -w 는 실제로 컨테이너 내에 존재하지 않은 디렉토리를 지정할 수 있다. 

user1@docker01:~$ docker container run -it -v /home/user1/nginxhtml:/root -w /testdir -e WORKDIR=/testdir centos:7 /bin/bash
bash-4.2# pwd  <-- 현재위치
/testdir
bash-4.2# echo $WORKDIR  <-- 환경변수
/testdir
bash-4.2# df
Filesystem     1K-blocks    Used Available Use% Mounted on
... 생략 ...
/dev/sda5       19992176 8806948  10146636  47% /root   <-- 마운트된 정보
 ...생략...
bash-4.2#



user1@docker01:~$ docker container rm -f $(docker container ls -aq)
모든 컨테이너 삭제하기

user1@docker01:~$ docker volume rm $(docker volume ls -q)
모든 볼륨 삭제하기


자신만의 이미지를 만드는 대표적인 방법
- Dockerfile 을 이용한 생성
도커파일은 텍스트파일이며 도커가 해당 텍스트의 내용을 기반으로 새로운 이미지를 생성하게된다.

docker build -t mynginx:1.0 .   

mynginx : 이미지  이름
1.0 : 버전  -> 숫자,, 문자를  사용할  수  도  있다.. 예를  들어
mynginx:blue  mynginx:green 
 . -> Dockerfile 의  위치  -> 현재  디렉토리에  있는  Dockerfile  의  내용을  읽어  이미지를  만들어라!!!! 
Dockerfile  이  아니라  다른  이름을  사용한다면?? -f Dockerfile-blue 
일반적으로  여려 이미지를  만들고자  한다면  이미지  별로  별도의  디렉토리를  생성하고  각  디렉토리에서  Dockerfile  을  작성한다.. 
 
user1@docker01:~/docker$ cat  Dockerfile

FROM ubuntu:18.04   <--- FROM 베이스  이미지  지정. FROM 은  일반적으로  Dockerfile 의  첫줄에  위치하게  된다.. (필수요소!!!)

예전에는)) MAINTAINER -> 이미지  제작자에  대한  설명. 현재는  LABEL 을  이용하여  이를  대체한다.. 추가적으로
LABEL name="gildong"
LABEL email="test@test.com"
LABEL version="1.0"  

RUN apt-get update -y
RUN apt-get install nginx -y

"RUN" 은  이미지내에서  실행할  명령어들... RUN 은  Dockerfile 내에서  여러번  사용가능


COPY index.html /var/www/html/index.html
로컬(ubuntu 20.04)에  있는 특정  파일,, 디렉토리를  이미지로  복사한다..  

ADD 는  COPY 와  비슷하다.. COPY 의  모든  기능을  포함한다.. 원격지에  있는  파일의  붙여넣기도  가능하다.. 

CMD nginx -g 'daemon off;'
CMD 와  RUN 은  둘다  대부분  명령실행이  주가  되지만  RUN 은  이미지에서  실행
CMD 는  이미지가  아니라  컨테이너로  배포될  때  실행하는  명령어이다.. 
CMD 는  RUN 과  달리  Dockerfile 내에서  1번만  사용할  수  있다.. 
-> 쉘을  이용한다.. 파일을  만들고  파일을  이미지에  복사하고...
 CMD /bin/bash install.sh

vi install.sh
#!/bin/bash
nginx -g daemon off;
두번째  명령
세번째  명령.... 


Quiz. CentOS:7 이미지를  이용하여  mycentos:1.0 을  생성한다.
해당  이미지는  httpd 가  설치되고  로컬에  있는  index.html 파일을  컨테이너의  홈디렉토리에  복사하여  컨테이너  실행시  즉시  웹페이지가  보여야  한다.

참고로  httpd 의  실행은  
CMD httpd -D FOREGROUND

1. Base 이미지  centos:7.0 pull 
2. yum update
3. yum -> httpd 설치
4. 로컬에  있는  index.html 파일을  COPY 또는  ADD 를  이용하여  이미지의  
     /var/www/html 아래에  붙여넣기  한다..
5. 컨테이너로  배포할  때  httpd 를  실행한다..

user1@docker01:~/docker$ cat Dockerfile
FROM centos:7  <-- base 이미지  지정
RUN yum update -y
RUN yum -y install  httpd
EXPOSE 8080 <-- 80, 8080 포트  오픈
ADD index.html /var/www/html/index.html  <- 로컬에  있는  index.html 을  이미지로  복사
CMD httpd -D FOREGROUND <- 컨테이너로  배포될  때 , httpd 실행해라!!!!
user1@docker01:~/docker$
  
docker build -t mycentos:1.0 .     <--- 새로운  이미지  작성
docker container  run  -d -p 8888:80 mycentos:1.0    <--- 컨테이너  배포

만약  실제로  컨테이너가  8080 에서  서비스를  제공하고  싶다면  이미지에서  httpd.conf 파일의  내용중  Listen 80 을  Listen 8080 으로  미리  변경해  두어야  한다.

RUN sed -i 's/Listen 80/Listen 8080/' /etc/httpd/conf/httpd.conf


ADD 와  COPY 의  가장  큰  차이점
COPY 는  패키지  파일을  붙여넣기하면  파일  자체가  그대로  붙여넣기  된다..
하지만  ADD 는  패키지의  내용이  풀이면서  붙여넣기  된다.. 

test.tar -> 패키지로  묶기!!!! 

user1@docker01:~/docker$ cat Dockerfile
FROM centos:7
RUN yum update -y
RUN yum -y install httpd
EXPOSE 80 8080
ADD index.html /var/www/html/index.html
ADD global.tar  /var/www/html/
CMD httpd -D FOREGROUND
user1@docker01:~/docker$


user1@docker01:~/docker$ docker  container  exec  modest_maxwell ls  /var/www/html

global
index.html
user1@docker01:~/docker$
user1@docker01:~/docker$ docker  container  exec  modest_maxwell ls  /var/www/html/global

Portfolio.psd
README.md
assets
index.html
user1@docker01:~/docker$
user1@docker01:~/docker$

COPY 는  a.tar  파일이  컨테이너에서도  a.tar 그대로  유지되지만
ADD 는  a.tar  파일  내에 있는  파일,, 디렉토리  등이  패키지  해재  된  상태에서  컨테이너에  붙여넣기  된다..

ADD http://www.test.com/index.jsp /var/www/html/index.jsp 

CMD 나  ENTRYPOINT 는  도커파일  내에서  한번만  사용할  수  있으므로  컨테이너  실행시  여러  명령을  실행하고자  한다면  다음과  같은  방법을  사용할  수  있다..

ADD ./a.sh /root
ENTRYPOINT ./root/a.sh

ENTRYPOINT /bin/bash /root/a.sh
ENTRYPOINT ["/bin/bash", "/root/a.sh"]

ENTRYPOINT vs CMD 는  docker container run 을  할때  ENTR.. 는  무조건  실행되지만,, CMD 는  옵션과  겹칠경우  동작하지  않게된다.. 


ONBUILD 는  팀장이  베이스이미지를  만들고  이를  배포한다..
개발팀은  팀장이  만든  베이스  이미지를  가져다가  새로운  이미지로  만들때  동작하는  기능


팀장  : 개발팀  여러분!!!! 웹사이트  코드는  global.tar 로  만들어서  build 하세요!!!
제가  기본  이미지를  만들어서  배포할  건데  기본  이미지는  web:1.0 으로  할게요!!!!

팀원  : global 이라는  디렉토리  아래에  필요한  코드,, 이미지  등을  모두  넣어두고  이를  global.tar 로  만든다.   
   global
         |-index.htm
         |-img(directory)
         |-js(directory)
         |-css(directory)

   tar cf global.tar global/* 

Dockerfile
FROM web:1.0 
#ONBUILD ADD global.tar /var/www/html


mkdir chulsoo ; cd chulsoo
git clone https://github.com/amiechen/codrops-scribbler.git
mv codrops-scribbler chulsoo
tar cf global.tar chulsoo/*
echo "FROM web:1.0" > Dockerfile
docker build -t web:chulsoo .
docker container run -d -p 8009:80 web:chulsoo


 http://211.183.3.200:8009/chulsoo/ 로  접속해  본다.. 

WORKDIR 은  작업  디렉토리를  지정한다..

WORKDIR /test
touch a.txt
touch b.txt
touch c.txt 

RUN cd /etc   <-- 작업  디렉토리를  cd 로 이동하는  것은  아니다!!!!
touch d.txt   <---? /test

WORKDIR /etc
# 이후의  모든  작업은  /etc/ 아래에서  진행된다.. 

만약  WORKDIR /hello 라고  했는데... 초기에  /hello 디렉토리가  없다면???? 자동으로  생성해  준다.. 



ENV 는  컨테이너에서  사용하는  환경변수를  지정하는  것이라면  
이미지  자체에서  사용하는  변수는  ARG 를  이용한다.. 


볼륨  사용예))
user1@docker01:~$ cat Dockerfile
FROM centos:7
RUN yum -y install httpd
EXPOSE 80
VOLUME /etc/httpd
CMD httpd -D FOREGROUND

user1@docker01:~$ docker  build -t webtest:1.0 .

user1@docker01:~$ docker container  run  -d  -p  8081:80 webtest:1.0
2c4b8a96645f958be1fa8feff3044e104b8e9a9b6ca494e75be2a1147058364c
user1@docker01:~$ docker volume  ls

DRIVER    VOLUME NAME
local     6741ad5f9a7f0c73e362c898455a20ef9fd4e0d02f7b4cfd382940c9f907150f
user1@docker01:~$
user1@docker01:~$ docker  container  inspect  2c4b8a96645f
user1@docker01:~$ sudo  ls  /var/lib/docker/volumes/6741ad5f9a7f0c73e362c898455a20ef9fd4e0d02f7b4cfd382940c9f907150f/_data
conf  conf.d  conf.modules.d  logs  modules  run
user1@docker01:~$
user1@docker01:~$ sudo  ls  /var/lib/docker/volumes/6741ad5f9a7f0c73e362c898455a20ef9fd4e0d02f7b4cfd382940c9f907150f/_data/conf/
httpd.conf  magic
user1@docker01:~$

컨테이너는  휘발성이다. 컨테이너  내에서  이루어지는  작업(파일//디렉토리  만들기,, 패키지  설치하기  등))은 컨테이너가  삭제된다면  모든  작업이  삭제되는  것이다.. 만약  중요한  데이터가  컨테이너  내에  있었는데  컨테이너가  삭제되었다면?? 해당  데이터도  함께  삭제되는  문제가  있을  수  있다.. 이를  위해  컨테이너의  특정  디렉토리를  volume 과  연결하게  되면  로컬  또는  원격지의  볼륨과  마운트  되어  해당  파일,,디렉토리등을  영구적으로  보관할  수  있게된다.. 


Quiz.
베이스 이미지  mariadb:10.4 를  이용하여  아래의  조건에  맞는  컨테이너를  배포하고  ubuntu 에서  직접  접속해  보세요

root 패스워드  : test123
기본  database 이름  :  testdatabase
기본  포트  : 3306 , 하지만  외부에서  접속할  때에는  33062 와  같은  포트를  사용하여  접속한다..
mysql(mariadb) 의  데이터는  로컬 의  볼륨과  연결하여  혹시  컨테이너가  삭제되더라도  해당  데이터는  영구적으로  보관할  수  있어야  한다..

최종적으로  우분에서  아래와  같이  접속할  수  있어야  한다..
mysql testdatabase -u root -ptest123 -h 211.183.3.200 -P 33062 

고민해야  할  사항 )
mariadb 에서  데이터는  어느  디렉토리에  위치하는가?? -> volume 과  연결하기  위해서
최종적으로  mariadb 를  실행할  때에는  CMD ["mysqld"]

[결과예시]]
user1@docker01:~/docker/test$ docker container inspect --format="{{ (index .Mounts 0).Source }}" e3015975e4b0
/var/lib/docker/volumes/5ab3da446905fdfbb9a126e2033632f6b50ca0bd68c97df742d7417bd15f0754/_data

user1@docker01:~/docker/test$ sudo ls /var/lib/docker/volumes/5ab3da446905fdfbb9a126e2033632f6b50ca0bd68c97df742d7417bd15f0754/_data
aria_log.00000001  ib_logfile0        mysql
aria_log_control   ib_logfile1        mysql_upgrade_info
ib_buffer_pool     ibtmp1             performance_schema
ibdata1            multi-master.info  testdb
user1@docker01:~/docker/test$
user1@docker01:~/docker/test$ mysql testdb  -u  root  -ptest123 -h  211.183.3.200 -P 33062
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 9
Server version: 10.4.24-MariaDB-1:10.4.24+maria~focal mariadb.org binary distribution

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [testdb]>









  





