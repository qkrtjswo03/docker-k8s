docker  system  prune -af  (동작중인 컨테이너는 삭제되지 않음)

모든 볼륨 한꺼번에 삭제하기
docker volume rm -f $(docker  volume  ls  -q)

모든 컨테이너 한꺼번에 삭제하기
docker  container  rm  -f  $(docker  container ls  -aq)


컨테이너( 쿠버네티스 : pod-완전한 하나의 서비스를 제공할 수 있는 컨테이너의 묶음) 모니터링 도구.
- CAdvisor  
docker container run  \
--volume=/:/rootfs:ro \
--volume=/var/run:/var/run:ro \
--volume=/sys:/sys:ro \
--volume=/var/lib/docker/:/var/lib/docker:ro \
--volume=/dev/disk/:/dev/disk:ro \
-p 8080:8080 \
--detach=true \
--name=cadvisor \
google/cadvisor:latest

호스트의 특정 디렉토리(도커와 관련있는) 를 캐드바이저의 특정 디렉토리와  마운트하고 해당 디렉토리에 있는 도커관련 정보를 GUI  를 통해웹에서 확인할 수 있도록 도와준다.

- /var/run   -> 우분투(진짜 서버) 에서 도커를 제어하기 위한 소켓이 포함되어 있다.
- /sys            -> 컨테이너들의 cgroup  정보가 포함되어 있음. 
- /var/lib/docker  -> 도커 컨테이너와 이미지 등의 정보가 파일 형태로 존재한다. 



Dockerfile(Dockerfile  내에 필요한 내용을 작성하여 build))  

Dockerfile  텍스트 파일을 생성하고 내부에 
base image  지정
이미지에 설치해야할 패키지 지정
볼륨 연결
호스트에서 특정 파일 이미지로 붙여넣기 지정
나중에 컨테이너로 배포할 때 처음 실행할 명령어 지정

실습1. centos:7  이미지에 아무것도 하지 않고 새로운 이미지 만들어보기

commit (생성된 컨테이너를 이미지화)  


볼륨연결 : 
- 컨테이너에서 볼륨 이 필요한 이유
   컨테이너는 휘발성이다. 컨테이너 내에서 새로운 파일을 생성했는데, 컨테이너가 삭제되었다면 생성된 파일은 ? 함께 사라진다. 즉, 데이터를 영구적으로 보관할 수 없다.

이를 위해 로컬(우분투)에 볼륨을 생성하고 해당 볼륨을 컨테이너에 연결해 준다. 해당볼륨에 데이터가 작성된다면 컨테이너가 삭제되더라도 데이터는 영구적으로 보관할 수 있게 된다.

실습2.
FROM centos:7
RUN yum -y update
RUN yum -y install git curl wget httpd
COPY index.html /var/www/html/index.html
RUN curl https://www.nginx.com > /var/www/html/nginx.html
ADD a.tar /var/www/html
VOLUME /etc/httpd /var/log/httpd
EXPOSE 80 3306
CMD httpd -D FOREGROUND





 "Source": "/var/lib/docker/volumes/0ad4cdf1a165973753767c497edffc5384c01930dbf7e203b5e7cd817da7df2d/_data",

                "Source": "/var/lib/docker/volumes/a78ba337ecb2c58d94141fa942169219456d2df32f7fc4f1ba3cd1e1aaf0aab4/_data",

실습3.
미리  생성한  컨테이너  test01 을  삭제하고,,
기존  Dockerfile 을  활용하여  아래의  추가  조건을  갖춘  이미지  생성,, 컨테이너  배포가  가능하도록  하세요..

기존  내용에  mariadb-server (버전은  10.4)를  설치하고, 처음  컨테이너가  배포될  때  웹서버,, DB 서버  모두  실행가능해야  한다!!!!
CMD 는  사용하지  말고  ENTRYPOINT 만  한번  사용하세요!!!!


http://211.183.3.200:8008 ----> 컨테이너:80
mysql -u root -p -h 211.183.3.200 -P 33068 --> 컨테이너:3306 




ubuntu (20.04) 에서 인터페이스 설정
- yml, yaml 파일을 이용하여 변경하기
- desktop 버전은 기본적으로 NetworkManager 의 관리하에 있다. 
NM 는 일반적으로 GUI 가 있는 환경에서 일반 사용자들이 파일에 설정하는 방법이 아니라 GUI 도구를 이용하여 IP 등의 네트워크 설정을하게되면 systemctl restart network 와 같은 서비스 재 실행과 상관없이 즉시 변경된 내용을 반영시킬 수 있게 된다.


user1@docker01:~$ sudo cat /etc/netplan/01-network-manager-all.yaml 
# Let NetworkManager manage all devices on this system
network:
  version: 2
  renderer: networkd
  ethernets: 
    ens32: 
      addresses: 
      - 211.183.3.254/24 
      gateway4: 211.183.3.2 
      nameservers:
        addresses:
        - 8.8.8.8 
        - 168.126.63.1        
user1@docker01:~$ 


user1@docker01:~$ sudo netplan apply



만약 dhcp 를 통해 IP 주소를 획득하고자 한다면
user1@docker01:~$ sudo cat /etc/netplan/01-network-manager-all.yaml 
# Let NetworkManager manage all devices on this system
network:
  version: 2
  renderer: networkd
  ethernets: 
    ens32: 
      dhcp4: true








기본적을 docker login 은 docker hub 에 로그인 하도록 설정되어 있다. 
도커 허브는 public, private 저장소를 모두 제공한다. 

회사내에서 자체 프로젝트를 진행하고 있는 경우에는 인터넷과의 연결이 없는 경우가 많다.

로컬 저장소의 이미지 공유는 불가능하다. 

도커 이미지를 저장할 수 있는 곳
1. local registry (내 컴퓨터)
2. public registry ( docker-hub)
3. private registry 
        - 인터넷 접속을 이용한 사설 저장소 : 설치가 필요하지 않다. 
              1. docker hub 의 사설 저장소
              2. aws 의 사설 저장소
              3. gcp, azure  등의 사설 저장소

        - 폐쇄형 (인터넷 연결 없어도 사용가능) :
              1. private registry 


사설 저장소 구축하기 : 
user1@docker01:~$ docker image pull registry
user1@docker01:~$ docker container run -d -p 5000:5000 \


이미지를 사설 저장소, 공개 저장소 등에 push 하기  위해서는 이미지 이름에 일정한 규칙을 준수해야 한다. 일반적으로 
ID/IMAGENAME:TAG

사설 저장소
레지스트리주소:포트번호/이미지이름:태그

user1@docker01:~$ docker tag centos:7 localhost:5000/test:1.0

user1@docker01:~$ docker image rm localhost:5000/test:1.0
user1@docker01:~$ docker image pull localhost:5000/test:1.0
1.0: Pulling from test
Digest: sha256:dead07b4d8ed7e29e98de0f4504d87e8880d4347859d839686a31da35a3b532f
Status: Downloaded newer image for localhost:5000/test:1.0
localhost:5000/test:1.0
user1@docker01:~$ docker image ls | grep localhost:5000
localhost:5000/test   1.0       eeb6ee3f44bd   5 months ago        204MB
user1@docker01:~$ 


도커 컴포즈
- 기존의 이미지 생성 -> docker containe run 단계를 하나의 파일에 구성할 수 있는 방법
- 두 개이상의 컨테이너를 연결할 경우에 기존에 link 등을 사용하여 연결했던 방법을 단순화 시킬 수 있다.
- 네트워크, 볼륨 등을 하나의 파일에 작성함으로써 전체 인프라 환경을 간편히 구축할 수 있고 서비스 배포도 용이하다.
- 작성된 파일을 파일기반으로 서비스 환경을 생성하거나 삭제할 수 있으므로 편리하게 서비스 배포가 가능하다.  
- scale 조정을 통해 특정 컨테이너의 수를 늘리거나 줄이는 것도 가능하다. 

단점 : 
1. 컴포즈는 한대의 서버에서만 동작하는 원리이므로 다수의 서버에 컨테이너를 배포할 경우에는 사용할 수 없다. 이는 이후에 학습할 docker swarm(여러서버에서 compose 를 이용한 환경구성/서비스배포/auto-scale) 에서 다루게 된다. 

2. docker-compose 는 도커의 기본 프로젝트에 포함된 사항이 아니므로 docker 설치와 별도로 compose 를 설치가 진행되어야 한다. 

docker-compose 설치하기
sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

docker-compose --version

컴포즈 파일은 
- 서비스
- 네트워크
- 볼륨을 정의한다.

따라서 컴포즈 파일의 좌측 벽면에는 
version, services, networks, volumes 를 붙여 쓴다. 
아래의 경우는 이미 만들어져 있는 이미지를 활용하는 경우
services:
  webserver:
    image: httpd

아래의 경우는 Dockerfile 을 이용하여 이미지 생성부터 서비스배포까지 포함한다.
services:
  webserver:
    build: .      <-- 현재 위치에 있는 Dockerfile 을 이용하여 이미지 만들고 그 이미지로 실행




expose 는 컨테이너 자체에 오픈된 포트를 의미하며 이 포트가 외부에서 연결되는 것은 아니다
ports 는 자신의 포트와 호스트의 포트를 매핑한다.

ports:                  -> docker container run -p 8001:80
  - 8001:80  
  - 443:443

expose
  - 3306

 Dockerfile

 EXPOSE 80 3306



서비스 의존관계 -> 일종의 시작 순서 결정. 단, 시작순서를 결정하는 것이지 앞의 서비스가 안정적으로 동작한 다음에 다음 서비스가 실행되는 것은 아니다. 이를 보장해 주지 않는다. 


실습 : mysql 과 wordpress 를 이용한 웹 서비스 배포하기

user1@docker01:~$ docker pull mysql:5.7
user1@docker01:~$ docker pull wordpress

version: "3.3"
services:
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: test123
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress

  wordpress:
    image: wordpress
    volumes:
      - wordpress_data:/var/www/html
    ports:
      - "8009:80"
    restart: always
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
    depends_on:
      - db

# networks:

volumes:
  db_data: {}
  wordpress_data: {}


docker-compose up -d

docker-compose 파일에 기반하여 컨테이너를 실행할 경우에는 
docker-compose.yml 이 있는 디렉토리에서 docker-compose up -d 를 통해 서비스 배포

docker-compose ps  는 컴포즈를 통해서 배포된 컨테이너들만 확인 가능
docker-compose up --scale wordpress=3   -> 서비스 명 wordpress 에 해당하는 컨테이너만 스케일을 3으로 조정하여 확장할 수 있다.

만들어져 있는  모든 환경을 한번에 삭제하고 싶다면 파일이 있는 디렉토리에서
docker-compose down  



Quiz. 
아래의 조건을 만족하는 docker-compose.yml 파일을 생성하고 배포하라.

기본 이미지 : myhttpd:1.0  <-- index.html 은 로컬에 있는 index.html 을 ADD  로 붙여서 만든다
컨테이너로 배포될 때에는 웹서비스를 자동으로 실행할 수 있어야 한다.

서비스 이름은 다음과 같다
services:
  websrv:
     image: myhttpd:1.0

외부에 포트 공개는 8001~8008 까지 사용한다.
볼륨은 websrv 라는 이름으로 생성되고 각 컨테이너의 /etc/httpd 와 연결된다.

컨테이너는 websrvnet 이라는 네트워크에 배포된다.  
 

step1. 작업 디렉토리 생성하기
mkdir websrv ; cd websrv

step2. 실습용 index.html 페이지 작성
curl http://www.keduit.com > index.html

step3. 이미지 작성(Dockerfile)
vi Dockerfile
FROM httpd
ADD index.html /usr/local/apache2/htdocs/index.html
EXPOSE 80

CMD httpd -D FOREGROUND


step4. docker-compose.yml 파일 작성
vi docker-compose.yml 
version: "3.3"
services:
  websrv:
    image: myhttpd:1.0
    networks:
      - websrvnet
    volumes:
      - websrv
    ports:
      - "8001-8008:80"

networks:
  websrvnet:
volumes:
  websrv: {}

step5. 배포하기(처음부터 5개 배포)
user1@docker01:~/docker/0303/websrv$ docker-compose up -d --scale websrv=5

확인)
user1@docker01:~/docker/0303/websrv$ docker-compose ps
     Name              Command        State        Ports      
--------------------------------------------------------------
websrv_websrv_1   /bin/sh -c httpd    Up      0.0.0.0:8007->80
                  -D FOREGROUND               /tcp,:::8007->80
                                              /tcp            
websrv_websrv_2   /bin/sh -c httpd    Up      0.0.0.0:8008->80
                  -D FOREGROUND               /tcp,:::8008->80
                                              /tcp  \
                --- 이하 생략 ----

http://211.183.3.254:8007 8008 등 할당된 포트로 접속해 본다.

























