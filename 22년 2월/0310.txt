[03/10]
VMware workstation 실행하시고

지난번에  실습할  때  사용한  
KVM1/KVM2/STORAGE 실행해  두세요..DB  는  아직!!

STORAGE 를  제일  먼저  실행시키세요
KVM1~2 는  커널  버전  5 로  실행!!

1. IP 확인
ifconfig , ip a 를  통해  확인  가능
ifconfig 를  사용할  수  없다면   yum -y install net-tools

storage 
ens32, ens33, ens34

KVM1/KVM2
eth0, eth1, eth2, vswitch01 


openvswitch -> linux bridge 로  변경
  vswtich01                 br0

KVM1 
ifcfg-br0-----------------------
TYPE=Bridge
BOOTPROTO=none
NAME=br0
DEVICE=br0
ONBOOT=yes
IPADDR=211.183.3.101
PREFIX=24
GATEWAY=211.183.3.2
DNS1=8.8.8.8
NM_CONTROLLED=no

ifcfg-eth0-------------------------
TYPE=Ethernet
BOOTPROTO=none
NAME=eth0
DEVICE=eth0
ONBOOT=yes
BRIDGE=br0
NM_CONTROLLED=no


---------
1. KVM2 의  br0 설정하기
2. 연결상태  확인하기
모든  서버에서  인터넷  연결,, ping 192.168.1.X
KVM1-> ping 192.168.1.102
                  ping 192.168.1.199
                  ping 192.168.2.102
                  ping 192.168.2.199
                  ping 211.183.3.102
                  ping 211.183.3.199
                  ping www.google.com 
3. KVM1/KVM2 은  STORAGE 의  /shared 를  자신의  /cloud 로
마운트  되어  있는지  확인해  보세요!!!! (NFS  연결상태  확인하기))


 [ 실습 시나리오 ]
  서버 가상화 환경에서... 도커 스웜 클러스터 배포하기
  - GKE 에서 쿠버네티스 클러스터 환경 배포 처럼
      매니저 1, 워커 3 개 배포해라!!  (CPU,,RAM)) 선택하고 배포를 시작하면 
      클러스터구현까지 완료된 서비스를 제공하는 방식.
  - manager  배포 -> 도커/compose  는 설치가 되어 있어야 함
                                    -> 토큰도 발행해 둔 상태이어야 한다. 
                                     -> 토큰은 별도의 파일로 공유 저장소에 보관시킨다.
  -  worker  배포 -> 도커 설치되어 있어야 함
                                 -> 처음 실행하면서, 토큰 파일의 내용을 읽어서 클러스터에 참여시켜야 함

  -> 완료된 뒤에 manager  에서 docker  node  ls  를 해 보면 스웜 클러스터가 구현되어 있어야 함
   -> 서버 가상화 환경에서 배포되므로 워커나 매니저가 마이그레이션 되더라도 클러스터는 유지되어야 한다. 
  
   manager  배포 -> 처음 실행하면서?
                                       docker  swarm  init  --advertise-addr=eth0:2377
                                    토큰 발행됨 -> 공유 저장소에 파일 형태로 저장

   storage(centos))  에서 manager  를 생성  -> centos  7 버전에 도커,컴포즈가 설치되도록

 STORAGE 에서 아래 내용 실행
[root@storage ~]# yum -y install libvirt qemu-kvm virt-install guestfish
[root@storage ~]# vi /etc/libvirt/qemu.conf
442 user = "root"        # 제일 앞에 있는 "#" 제거
446 group = "root"     # 제일 앞에 있는 "#" 제거

[root@storage ~]# systemctl enable libvirtd
[root@storage ~]# systemctl start libvirtd
[root@storage ~]# virt-builder -l | grep CentOS
centos-6                 x86_64     CentOS 6.6
centos-7.0               x86_64     CentOS 7.0
                   - 이하 생략 - 



   
 이미지(볼륨)를 만들때
 - 호스트이름 : manager   --hostname
 - 루트패스워드 : test1123  --root-password password:test123
 - storage  의 /instance  디렉토리를 마운트 할 /nfs  디렉토리 생성   --mkdir /nfs
 - 이 볼륨에 nfs  클라이언트, 도커, 컴포즈 를 설치하려면???  --run install.sh 
 - 이미지에 방화벽 해제, 도커 실행 을 위한 설정 입력 
              --run-command 'sudo systemctl disable firewalld'
              --run-command 'sudo systemctl enable docker'

 ---- install.sh -------------
 #!/bin/bash
 sudo yum -y install nfs-utils
 # sudo ... 도커 설치 관련 명령들...
 # sudo ...  컴포즈 설치 명령들 ....  
[처음 부팅할 때 실행해야 할 요소들]
 - 생성된  볼륨을 virt-install 을 이용하여 인스턴스로 배포할 때 실행할 명령들... 
     로컬에 있는 /nfs 와 211.183.3.199 의 /instance 디렉토리를 마운트
      --firstboot-command 'sudo mount -t nfs 211.183.3.199:/instance /nfs'

 - 로컬에서 도커 스웜을 시작하고 결과코드(토큰 포함된..) 를 /nfs 의 아래에 파일로 저장
      --firstboot-command 'sudo docker swarm init --advertise-addr eth0:2377 > /nfs/manager-token.txt' --selinux-relable


  --run  [파일이름]
  --run-commnad  [명령어]


 virt-builder -> 인스턴스에 추가될 볼륨 생성작업(기본 이미지 centos-7.4 를 이용하여 이용가능한 볼륨 크기로 늘리기 위해서는 virt-resize) -> 생성된 볼륨을 불러와서 새로운 인스턴스를 생성한다(virt-install-> cpu,ram,nic)

CentOS 7.4 에서 도커와 컴포즈 설치를 위한 install.sh 파일의 내용
#!/bin/bash
sudo yum -y install nfs-utils
sudo yum -y install yum-utils device-mapper-persistent-data lvm2
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum -y install docker-ce
sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose


 [실습 시나리오]
 볼륨만들기 (virt-builder)
 1. 호스트 이름 : manager
 2. 파일 : /shared/manager.qcow2 
 3. 크기 : 20 G
 4. 디렉토리 만들기 : /nfs
 5. install.sh 내용을 토대로 docker, docker-compose 설치
 6. 볼륨에서 패키지에 대한 enable 설정 
          - 방화벽 : disable
           - docker : enable
 7. 인스턴스로 처음 배포될 때 아래의 설정내역이 가능하도록  구성하기
            부팅되면서(--firstboot-command) ..
                  211.183.3.199:/instance 를 인스턴스 내부의 /nfs 와 마운트하기
                  docker swarm init  --advertise-addr eth0:2377 을 실행하고 결과내역을
                  /nfs/manager-token.txt 에 저장

 인스턴스 만들기 (virt-install)
  1. 이름 : manager
  2. 컴퓨팅 자원 : cpu-1, ram-2048, NIC - br0 에 연결
  3. 콘솔 자동 연결하지 말것
  4. selinux 활성화

 [최종확인]
 1. 인스턴스 생성되었는가?
 2. storage 에서 ls /instance 를 했을 때 manager-token.txt 가 생성되었는가?
 3. 인스턴스 내부로 들어가서 
         systemctl status firewalld
         systemctl status docker
        (도커 실행, 방화벽 해제 되었다면... docker node ls  확인하면 manager 가입되어 있음) 
         

[virt-builder @storage]
virt-builder centos-7.4 --output /shared/manager.qcow2 \
--size 20G --hostname manager --mkdir /nfs \
--root-password password:test123 --run install.sh \
--run-command 'sudo systemctl enable docker' \
--run-command 'sudo systemctl disable firewalld' \
--firstboot-command 'sudo mount -t nfs 211.183.3.199:/instance /nfs' \
--firstboot-command 'sudo docker swarm init --advertise-addr eth0:2377 > /nfs/user1-token.txt' --selinux-relabel

install.sh-------
#!/bin/bash

sudo yum -y install nfs-utils
sudo yum -y install yum-utils device-mapper-persistent-data lvm2
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum -y install docker-ce
sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

[ virt-install @kvm1 ]
virt-install --name manager --vcpus 1 --ram 2048 \
--network bridge:br0,model=virtio --disk /cloud/manager.qcow2  \
--import --noautoconsole --os-variant rhel7

[worker]
(worker1 생성)

이미지 작성 
virt-builder centos-7.4 --output /shared/worker1.qcow2 \
--size 20G --hostname worker1 --mkdir /nfs \
--root-password password:test123 --run install.sh \
--run-command 'sudo systemctl enable docker' \
--run-command 'sudo systemctl disable firewalld' \
--firstboot-command 'sudo mount -t nfs 211.183.3.199:/instance /nfs' \
--firstboot-command '/nfs/manager-token 내용을 읽어서 스웜클러스터에 자동가입 가능하도록 하기 위한 스크립트 실행' --selinux-relabel

install.sh-------
#!/bin/bash

sudo yum -y install nfs-utils
sudo yum -y install yum-utils device-mapper-persistent-data lvm2
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum -y install docker-ce

 [확인해야 할 사항]
 worker1 이 정상적으로 실행되었다면 docker node ls 를 하여
 worker1 이 클러스터에 join 되었는지 여부를 확인한다.  

 worker1, 2 을 KVM2 에 배치하세요!!!!

 manager 에서 docker node ls
   manager
   worker1
   worker2

 docker node inspect worker1 --format {{.Status.Addr}}

 sample)
[root@storage dockertest]# virt-builder centos-7.4 --output /shared/worker1.qcow2 --size 20G --hostname worker1 --mkdir /nfs --root-password password:test123 --run installworker.sh --run-command 'sudo systemctl enable docker' --run-command 'sudo systemctl disable firewalld' --firstboot-command 'sudo mount -t nfs 211.183.3.199:/instance /nfs' --firstboot-command 'join=$(sudo cat /nfs/manager-token.txt | grep SWMTKN)' --firstboot-command 'sudo join' --selinux-relabel

[root@kvm2 network-scripts]# virt-install --name worker2 --vcpus 1 --ram 1024 --network bridge:br0,model=virtio --disk /cloud/worker2.qcow2  --import --noautoconsole --os-variant rhel7

[root@manager ~]# docker node ls
ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
e4m38jaz343fvrjbj4lrb9iv7 *   manager    Ready     Active         Leader           20.10.12
vba7ewxwcznkwhik5zgsay0mw     worker1    Ready     Active                          20.10.12
wmka7fe4jsktdmhqd5knb3fkd     worker2    Ready     Active                          20.10.12
[root@manager ~]#

 
-------- 마이그레이션 / 노드 연결 상태 확인 / 서비스 배포 -----------------
* KVM2 에 있던 worker2 를 KVM1 로 라이브 마이그레이션(시간 좀 걸립니다)
[root@kvm2 ~]# virsh list --all
 Id    Name                           State
----------------------------------------------------
 8     worker1                        running
 9     worker2                        running

[root@kvm2 ~]#
[root@kvm2 ~]# virsh migrate --live worker2 qemu+ssh://kvm1/system --unsafe
root@kvm1's password:

[root@kvm2 ~]#

* KVM1 에서 worker2 가 정상적으로 옮겨진 것을 확인하고 manager 에 들어간다 
[root@kvm1 ~]# virsh list --all
 Id    Name                           State
----------------------------------------------------
 4     manager                        running
 5     worker2                        running

[root@kvm1 ~]# virsh console manager

* 아래의 명령을 통해 클러스터는 여전히 안정적으로 유지되고 있음을 확인한다.
[root@manager ~]# docker node ls

* 아래와 같이 서비스 배포해 보기
[root@manager ~]# docker service create --name test -d -p 80:80 --replicas 2 --constraint 'node.role == worker' nginx

 * 윈도우 10 에서 manager 나 워커의 주소를 확인하고 웹 접속해 보기!!!
 혹시라도 인증 문제 발생하면 docker login 하고 나서 서비스 배포하세요!!!








